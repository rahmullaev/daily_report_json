#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from __future__ import annotations
import os, platform, logging, requests, json, argparse, time
from io import BytesIO
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional
from collections import defaultdict
from zoneinfo import ZoneInfo
from PIL import Image, ImageDraw, ImageFont  # ‚Üê –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Pillow
from telegram import Bot, ParseMode, InputMediaPhoto  # ParseMode –∑–¥–µ—Å—å!
from telegram.error import TelegramError
from prettytable import PrettyTable
import re


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
USE_LIVE = True
MODE = "FULL_REPORT"
PARIS = ZoneInfo("Europe/Paris")
DAY_NAME_RU = ["–ü–Ω.", "–í—Ç.", "–°—Ä.", "–ß—Ç.", "–ü—Ç.", "–°–±.", "–í—Å."]

# API endpoints
FORECAST_URL = "https://api.openweathermap.org/data/2.5/forecast"
CURRENT_URL = "https://api.openweathermap.org/data/2.5/weather"

# üîë –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
OW_API_KEY = os.getenv("OW_API_KEY", "")
CITY_ID = os.getenv("CITY_ID", "2994160")  # –¥–µ—Ñ–æ–ª—Ç ‚Äî –ü–∞—Ä–∏–∂

# –ì—Ä–∞—Ñ–∏–∫–∞
WIDTH = 500
ICON_SIZE = 32

# Telegram
USER_IDS = [int(uid) for uid in os.getenv("TELEGRAM_USER_IDS", "883019358").split(",")]
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")

# Kaspi –∫—É—Ä—Å—ã
KASPI_URL = "https://guide.kaspi.kz/client/api/v2/intgr/currency/rate/aggregate"
MONITOR_CURRENCY = "USD"
OPERATION_TYPE = "sale"
CURRENCIES = ("USD", "EUR")
TIMEOUT_API = 10

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_FILE = os.path.join(SCRIPT_DIR, "data", "weather_data.json")
LOG_FILE = os.path.join(SCRIPT_DIR, "Log.log")

BASE_HEADERS = {
    "Accept": "application/json, text/plain, */*",
    "Content-Type": "application/json",
    "gIsAuthorized": "false",
    "gIsInnerRequest": "false",
    "gIsMobileApp": "false",
    "gLanguage": "ru",
    "gRole": "1",
    "gSystem": "kkz",
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
try:
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    bot = None

# ‚îÄ‚îÄ‚îÄ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='[%(asctime)s]-%(levelname)s-%(message)s',
        datefmt='%d.%m.%Y %H:%M:%S',
        handlers=[
            logging.FileHandler(LOG_FILE, encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

log = setup_logging()



def send_error_to_telegram(error_msg: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–æ–∫ –≤ Telegram"""
    try:
        log.error(error_msg)
        tg_msg(f"üö® –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:\n{error_msg}")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—à–∏–±–∫–∏ –≤ Telegram: {e}")

# ‚îÄ‚îÄ‚îÄ –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def should_run(hour: int, update_only: bool) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
    if not update_only:
        return True
    return 5 <= hour <= 15

def get_weather(use_live: bool = USE_LIVE) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
    if not use_live:
        data = load_data().get("weather", {})
        if data:
            last_upd = data.get("last_upd_weather", "–ò–∑ —Ñ–∞–π–ª–∞ (–Ω–µ—Ç –¥–∞—Ç—ã)")
            return data | {"last_upd_weather": last_upd}
        return None

    try:
        params = {"id": CITY_ID, "units": "metric", "lang": "ru", "APPID": OW_API_KEY}
        cur = requests.get(CURRENT_URL, params=params, timeout=10).json()
        fc = requests.get(FORECAST_URL, params=params, timeout=10).json()

        today = datetime.now(PARIS).date()
        buckets = defaultdict(list)
        for itm in fc.get("list", []):
            buckets[datetime.utcfromtimestamp(itm["dt"]).date().toordinal()].append(itm)

        forecast = {}
        for off in range(1, 4):
            tgt = today + timedelta(days=off)
            bucket = buckets.get(tgt.toordinal(), [])
            if not bucket: continue
            mid = min(bucket, key=lambda x: abs(datetime.utcfromtimestamp(x["dt"]).hour-12))
            loc = datetime.fromtimestamp(mid["dt"], PARIS)
            suf = str(off)
            forecast |= {
                f"day_name_{suf}": DAY_NAME_RU[loc.weekday()],
                f"temp_{suf}": f"{mid['main']['temp']:+.0f}",
                f"icon_{suf}": mid["weather"][0]["icon"],
                f"descr_{suf}": mid["weather"][0]["description"],
            }

        new_data = {
            "cur_temp": cur["main"]["temp"],
            "cur_icon": cur["weather"][0]["icon"],
            "cur_descr": cur["weather"][0]["description"],
            "last_upd_weather": datetime.now(PARIS).strftime("%d.%m.%Y %H:%M:%S")
        } | forecast

        store = load_data()
        store["weather"] = new_data
        save_data(store)
        return new_data
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}"
        send_error_to_telegram(error_msg)
        return None

def get_namaz(use_live: bool = USE_LIVE) -> Dict[str, str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–æ–≤ —Å Mawaqit"""
    if not use_live:
        data = load_data().get("namaz", {})
        if data:
            last_upd = data.get("last_upd_namaz", "–ò–∑ —Ñ–∞–π–ª–∞ (–Ω–µ—Ç –¥–∞—Ç—ã)")
            return data | {"last_upd_namaz": last_upd}
        return {}

    try:
        url = "https://mawaqit.net/ru/grande-mosquee-de-metz-metz"
        r = requests.get(url, timeout=10)
        html = r.text

        match = re.search(r'var\s+confData\s*=\s*({.*?});', html, re.DOTALL)
        if not match:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ confData –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Mawaqit")

        data_json = json.loads(match.group(1))
        times = data_json.get("times", {})
        namaz_times = {}

        if isinstance(times, dict):
            # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
            namaz_mapping = {
                "fajr": "–§–∞–¥–∂—Ä",
                "shuruq": "–í–æ—Å—Ö–æ–¥", 
                "dhuhr": "–ó—É—Ö—Ä",
                "asr": "–ê—Å—Ä",
                "maghrib": "–ú–∞–≥—Ä–∏–±",
                "isha": "–ò—à–∞"
            }
            
            for eng_name, rus_name in namaz_mapping.items():
                if eng_name in times:
                    namaz_times[rus_name] = times[eng_name]
                    
        elif isinstance(times, list) and len(times) >= 5:
            # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ —Å–ø–∏—Å–∫–∞
            namaz_times = {
                "–§–∞–¥–∂—Ä": times[0],
                "–ó—É—Ö—Ä": times[1],
                "–ê—Å—Ä": times[2],
                "–ú–∞–≥—Ä–∏–±": times[3],
                "–ò—à–∞": times[4],
                "–í–æ—Å—Ö–æ–¥": data_json.get("shuruq", "")
            }

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å—Ç—å
        required_names = ["–§–∞–¥–∂—Ä", "–í–æ—Å—Ö–æ–¥", "–ó—É—Ö—Ä", "–ê—Å—Ä", "–ú–∞–≥—Ä–∏–±", "–ò—à–∞"]
        for name in required_names:
            if name not in namaz_times:
                namaz_times[name] = ""

        result = {
            **namaz_times,
            "last_upd_namaz": datetime.now(PARIS).strftime("%d.%m.%Y %H:%M:%S")
        }

        store = load_data()
        store["namaz"] = result
        save_data(store)
        return result
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–º–∞–∑–æ–≤ —Å Mawaqit: {e}"
        send_error_to_telegram(error_msg)
        return {}

def get_rates(force_update: bool = False, use_live: bool = USE_LIVE) -> Dict[str, Dict[str, str]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    if not use_live:
        data = load_data().get("currency_rates", {})
        if data:
            last_upd = data.get("last_upd_currency", "–ò–∑ —Ñ–∞–π–ª–∞ (–Ω–µ—Ç –¥–∞—Ç—ã)")
            return data | {"last_upd_currency": last_upd}
        return {"USD": {"buy": "470.5", "sale": "475.0"}, "EUR": {"buy": "490.0", "sale": "495.0"}}

    try:
        hdrs = {**BASE_HEADERS, "User-Agent": "Mozilla/5.0"}
        payload = {"use_type": "32", "currency_codes": list(CURRENCIES), "rate_types": ["SALE", "BUY"]}
        body = requests.post(KASPI_URL, headers=hdrs, json=payload, timeout=TIMEOUT_API).json()["body"]
        
        res = {it["currency"]: {"buy": it["buy"], "sale": it["sale"]} for it in body if it["currency"] in CURRENCIES}
        res["last_upd_currency"] = datetime.now(PARIS).strftime("%d.%m.%Y %H:%M:%S")
        
        store = load_data()
        store["currency_rates"] = res
        save_data(store)
        
        return res
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}"
        log.error(error_msg)
        return {}

def process_currency_history(rates: Dict[str, Dict[str, str]]) -> Dict[str, List[Dict[str, float]]]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫—É—Ä—Å–æ–≤ —Å —Ç–∞–±–ª–∏—á–Ω—ã–º –≤—ã–≤–æ–¥–æ–º —á–µ—Ä–µ–∑ prettytable"""
    try:
        if not rates or MONITOR_CURRENCY not in rates:
            return {}

        data = load_data()
        now = datetime.now(PARIS)
        current_date = now.strftime("%d.%m.%Y")
        full_datetime = now.strftime("%d.%m.%Y %H:%M:%S")

        if "currency_history" not in data:
            data["currency_history"] = {}

        if "last_history_update" not in data or data["last_history_update"] != current_date:
            data["currency_history"] = {MONITOR_CURRENCY: []}
            data["last_history_update"] = current_date
            log.info(f"–ò—Å—Ç–æ—Ä–∏—è –∫—É—Ä—Å–æ–≤ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è {current_date}")

        current_buy = float(rates[MONITOR_CURRENCY]["buy"])
        current_sale = float(rates[MONITOR_CURRENCY]["sale"])
        history = data["currency_history"].get(MONITOR_CURRENCY, [])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–ø–∏—Å—å
        if history:
            last_entry = history[-1]
            # –ï—Å–ª–∏ –∫—É—Ä—Å—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
            if (last_entry.get("buy") == current_buy and 
                last_entry.get("sale") == current_sale):
                log.debug("–ö—É—Ä—Å—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å")
                return data["currency_history"]

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        new_entry = {
            "t": full_datetime,
            "buy": current_buy,
            "sale": current_sale
        }

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ - —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if history:
            prev = history[-1]
            prev_buy = prev.get("buy", current_buy)
            prev_sale = prev.get("sale", current_sale)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            table = PrettyTable()
            table.field_names = ["–û–ø–µ—Ä–∞—Ü–∏—è", "–ü—Ä–µ–¥—ã–¥—É—â–∏–π", "–¢–µ–∫—É—â–∏–π", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ"]
            table.align = "r"
            table.align["–û–ø–µ—Ä–∞—Ü–∏—è"] = "l"
            table.header = True
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —ç–º–æ–¥–∑–∏
            buy_change = current_buy - prev_buy
            buy_emoji = "üìà" if buy_change > 0 else "üìâ" if buy_change < 0 else "‚ûñ"
            table.add_row([
                f"–ü–æ–∫—É–ø–∫–∞ {buy_emoji}",
                f"{prev_buy:.2f}", 
                f"{current_buy:.2f}",
                f"{'+' if buy_change > 0 else ''}{buy_change:.2f}"
            ])
            
            sale_change = current_sale - prev_sale
            sale_emoji = "üìà" if sale_change > 0 else "üìâ" if sale_change < 0 else "‚ûñ"
            table.add_row([
                f"–ü—Ä–æ–¥–∞–∂–∞ {sale_emoji}",
                f"{prev_sale:.2f}",
                f"{current_sale:.2f}",
                f"{'+' if sale_change > 0 else ''}{sale_change:.2f}"
            ])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"<b>üîî –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ {MONITOR_CURRENCY}</b>\n"
                f"<pre>{table}</pre>\n"
                f"üïí {now.strftime('%d.%m.%Y %H:%M:%S')}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            tg_msg(message, parse_mode=ParseMode.HTML)
            log.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞:\n{table}")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        history.append(new_entry)
        data["currency_history"][MONITOR_CURRENCY] = history[-24:]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 –∑–∞–ø–∏—Å–∏
        save_data(data)

        return data["currency_history"]

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}"
        send_error_to_telegram(error_msg)
        log.error(error_msg, exc_info=True)
        return {}

def tg_msg(txt: str, parse_mode: str = None, additional_ids: list = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    try:
        if not bot:
            log.error("–ë–æ—Ç Telegram –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return 0
            
        recipients = USER_IDS.copy()
        if additional_ids:
            recipients.extend(additional_ids)
            
        if not recipients:
            log.error("–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
            return 0
            
        max_attempts = 3
        success_count = 0
        
        for user_id in recipients:
            for attempt in range(max_attempts):
                try:
                    bot.send_message(
                        chat_id=user_id,
                        text=txt,
                        parse_mode=parse_mode,
                        timeout=15
                    )
                    success_count += 1
                    break
                except TelegramError as e:
                    if attempt == max_attempts - 1:
                        log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    else:
                        time.sleep(2)
                except Exception as e:
                    log.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    break
        
        log.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(recipients)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return success_count
        
    except Exception as e:
        log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ tg_msg: {e}")
        return 0

def tg_photo(path: str, caption: str = None, additional_ids: list = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ Telegram"""
    try:
        if not bot:
            log.error("–ë–æ—Ç Telegram –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return 0
            
        recipients = USER_IDS.copy()
        if additional_ids:
            recipients.extend(additional_ids)
            
        if not recipients:
            log.error("–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
            return 0
            
        max_attempts = 3
        success_count = 0
        file_processed = False
        
        try:
            with open(path, "rb") as photo_file:
                photo_data = photo_file.read()
                
                for user_id in recipients:
                    for attempt in range(max_attempts):
                        try:
                            bot.send_photo(
                                chat_id=user_id,
                                photo=BytesIO(photo_data),
                                caption=caption,
                                timeout=20
                            )
                            success_count += 1
                            break
                        except TelegramError as e:
                            if attempt == max_attempts - 1:
                                log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                            else:
                                time.sleep(2)
                        except Exception as e:
                            log.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                            break
                
                file_processed = True
                
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ: {e}")
            return success_count
            
        finally:
            if file_processed:
                try:
                    os.remove(path)
                    log.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {path} —É–¥–∞–ª–µ–Ω")
                except Exception as e:
                    log.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        
        log.info(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(recipients)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return success_count
        
    except Exception as e:
        log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ tg_photo: {e}")
        return 0

def save_data(data: dict):
    try:
        os.makedirs(os.path.dirname(DATA_FILE), exist_ok=True)
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}"
        send_error_to_telegram(error_msg)

def load_data() -> dict:
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        return {}
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}"
        send_error_to_telegram(error_msg)
        return {}

def font_path():
    paths = {
        "Windows": ["C:\\Windows\\Fonts\\consola.ttf", "C:\\Windows\\Fonts\\cour.ttf"],
        "Darwin": ["/System/Library/Fonts/Menlo.ttc"],
        "Linux": ["/usr/share/fonts/truetype/dejavu/DejaVuSansMono.ttf"]
    }
    for p in paths.get(platform.system(), []):
        if os.path.exists(p): return p
    raise FileNotFoundError

def get_icon(code: str):
    if not code: return None
    try:
        img = Image.open(BytesIO(requests.get(
            f"https://openweathermap.org/img/wn/{code}@2x.png", timeout=5
        ).content)).convert("RGBA")
        return img.resize((ICON_SIZE, ICON_SIZE), Image.Resampling.LANCZOS)
    except Exception:
        return None

def draw_currency_chart(d, x, y, w, h, hist, font, currency):
    if not hist: return y
    vals = [p[OPERATION_TYPE] for p in hist if OPERATION_TYPE in p]
    if not vals: return y
    
    v_min, v_max = min(vals), max(vals)
    if v_min == v_max:
        rng = v_max * 0.02
        v_min = v_max - rng
    else:
        rng = v_max - v_min
    
    bw = max(2, int(w / (len(vals)*3)))
    gap = bw
    total = len(vals)*(bw+gap) - gap
    
    if total > w:
        vals = vals[-w//(bw+gap):]
        total = len(vals)*(bw+gap)-gap
    
    ox = x + (w-total)//2
    oy = y + h
    
    d.line((ox, y, ox, oy), fill=0)
    d.line((ox, oy, ox+total, oy), fill=0)
    
    for i, v in enumerate(vals):
        px = ox + i*(bw+gap)
        ph = int((v - v_min)/rng*h)
        d.rectangle((px, oy-ph, px+bw, oy), fill=0)
    
    current_val = vals[-1] if vals else 0
    operation_name = "buy" if OPERATION_TYPE == "buy" else "sell"
    d.text((ox+total+5, y), f"‚ñ† {currency} ({operation_name}) {current_val}", font=font, fill=0)
    return oy + 20

def draw_pretty_table(draw, x, y, headers, rows, font, max_width=WIDTH - 20):
    table = PrettyTable()
    table.field_names = headers
    for row in rows:
        table.add_row(row)

    table_str = table.get_string()

    for line in table_str.splitlines():
        draw.text((x, y), line, font=font, fill=0)
        bbox = font.getbbox(line)
        line_height = bbox[3] - bbox[1]
        y += line_height + 4

    return y

def make_receipt(weather, curr, hist, namaz, fname="receipt.png"):
    img = Image.new("L", (WIDTH, 1200), 255)
    d = ImageDraw.Draw(img)
    fp = font_path()
    f24 = ImageFont.truetype(fp, 24)
    f18 = ImageFont.truetype(fp, 18)
    f14 = ImageFont.truetype(fp, 14)
    f12 = ImageFont.truetype(fp, 12)

    y = 8
    now = datetime.now(PARIS)
    d.text((10, y), ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß—Ç.", "–ü—Ç.", "–°–±.", "–í—Å."][now.weekday()], font=f24, fill=0)

    y += 30
    d.text((10, y), now.strftime("%d.%m.%Y %H:%M"), font=f24, fill=0)
    y += 25

    # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
    temp = round(weather["cur_temp"])
    ico = get_icon(weather["cur_icon"])
    if ico:
        icon_rgba = ico.convert("RGBA")
        mask = icon_rgba.split()[3]
        icon_l = icon_rgba.convert("L")
        img.paste(icon_l, (10, y), mask)
    d.text((50, y + 5), f"{temp}¬∞Cüå°Ô∏è, {weather['cur_descr'][:20]}", font=f24, fill=0)
    y += ICON_SIZE + 15

    # –ü—Ä–æ–≥–Ω–æ–∑
    d.text((10, y), f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è {weather.get('last_upd_weather', '?')}:", font=f14, fill=0)
    y += 25

    heads = ["#", "–î–µ–Ω—å", "–¢–µ–º–ø", "–û–ø–∏—Å–∞–Ω–∏–µ"]
    rows = []
    for i in range(1, 4):
        rows.append(["", weather[f"day_name_{i}"], f"{weather[f'temp_{i}']}¬∞C", weather[f'descr_{i}'][:25]])

    y_table_start = y
    y = draw_pretty_table(d, 10, y, heads, rows, f18)

    # –ò–∫–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    row_height = f18.getbbox(rows[0][1])[3] - f18.getbbox(rows[0][1])[1] + 4
    icon_x = 10 + 4
    for i in range(3):
        icon = get_icon(weather.get(f"icon_{i+1}", ""))
        if icon:
            icon_rgba = icon.convert("RGBA")
            mask = icon_rgba.split()[3]
            icon_l = icon_rgba.convert("L")
            icon_y = y_table_start + i * int(row_height * 1.5) + 45
            img.paste(icon_l, (icon_x, icon_y), mask)

    y += 15

    # –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
    d.text((10, y), f"–ö—É—Ä—Å –≤–∞–ª—é—Ç {curr.get('last_upd_currency', '?')}:", font=f14, fill=0)
    y += 25
    currency_rows = [[c, curr[c]["buy"], curr[c]["sale"]] for c in CURRENCIES]
    y = draw_pretty_table(d, 10, y, ["–í–∞–ª—é—Ç–∞", "–ü–æ–∫—É–ø–∫–∞", "–ü—Ä–æ–¥–∞–∂–∞"], currency_rows, f18)
    y += 15

    # –í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞
    d.text((10, y), f"–í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ {namaz.get('last_upd_namaz', '?')}:", font=f14, fill=0)
    y += 25
    namaz_rows = [[n, namaz.get(n, '?')] for n in ["–§–∞–¥–∂—Ä", "–í–æ—Å—Ö–æ–¥", "–ó—É—Ö—Ä", "–ê—Å—Ä", "–ú–∞–≥—Ä–∏–±", "–ò—à–∞"]]
    y = draw_pretty_table(d, 10, y, ["–ù–∞–º–∞–∑", "–í—Ä–µ–º—è"], namaz_rows, f18)
    y += 15

    # –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞
    operation_name = "–ø–æ–∫—É–ø–∫–∏" if OPERATION_TYPE == "buy" else "–ø—Ä–æ–¥–∞–∂–∏"
    d.text((10, y), f"–ì—Ä–∞—Ñ–∏–∫ {MONITOR_CURRENCY} ({operation_name}):", font=f14, fill=0)
    y += 25
    y = draw_currency_chart(d, 10, y, WIDTH - 20, 80, hist.get(MONITOR_CURRENCY, []), f14, MONITOR_CURRENCY)

    # –§—É—Ç–µ—Ä
    footer_text = "¬© Generated by rakhmullaev"
    text_width = f18.getbbox(footer_text)[2]
    d.text(((WIDTH - text_width) // 2, y), footer_text, font=f18, fill=0)
    y += 30

    img.crop((0, 0, WIDTH, y)).save(fname)
    return fname

def send_text_report(weather, curr, hist, namaz):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PrettyTable"""
    try:
        now = datetime.now(PARIS)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–≥–æ–¥–æ–π
        weather_table = PrettyTable()
        weather_table.field_names = ["–î–µ–Ω—å", "–¢–µ–º–ø"]
        weather_table.align = "l"
        weather_table._max_width = {"–î–µ–Ω—å": 20, "–¢–µ–º–ø": 8}
        weather_table.add_row([weather.get('last_upd_weather', '?'), f"{round(weather['cur_temp'])} ¬∞Cüå°Ô∏è"])
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
        forecast_table = PrettyTable()
        forecast_table.field_names = ["–î–µ–Ω—å", "–¢–µ–º–ø", "–ü–æ–≥–æ–¥–∞"]
        forecast_table.align = "l"
        for i in range(1, 4):
            forecast_table.add_row([
                weather[f"day_name_{i}"],
                weather[f"temp_{i}"],
                weather[f'descr_{i}'].capitalize()
            ])
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        currency_table = PrettyTable()
        currency_table.field_names = ["–í–∞–ª—é—Ç–∞", "–ü–æ–∫—É–ø–∫–∞", "–ü—Ä–æ–¥–∞–∂–∞"]
        currency_table.align = "r"
        currency_table.align["–í–∞–ª—é—Ç–∞"] = "l"
        for currency in CURRENCIES:
            currency_table.add_row([
                currency,
                curr[currency]["buy"],
                curr[currency]["sale"]
            ])
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–º–∞–∑–∞
        namaz_table = PrettyTable()
        namaz_table.field_names = ["–ù–∞–º–∞–∑", "–í—Ä–µ–º—è"]
        namaz_table.align = "l"
        for name in ["–§–∞–¥–∂—Ä", "–í–æ—Å—Ö–æ–¥", "–ó—É—Ö—Ä", "–ê—Å—Ä", "–ú–∞–≥—Ä–∏–±", "–ò—à–∞"]:
            namaz_table.add_row([name, namaz.get(name, '?')])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"<b>üìÖ –û—Ç—á–µ—Ç –Ω–∞ {now.strftime('%d.%m.%Y %H:%M')}</b>\n\n"
            f"<b>üå§ {weather['cur_descr'].capitalize()}:</b>\n<pre>{weather_table}</pre>\n\n"
            f"<b>üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è:</b>\n<pre>{forecast_table}</pre>\n\n"
            f"<b>üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç ({curr.get('last_upd_currency', '?')}):</b>\n<pre>{currency_table}</pre>\n\n"
            f"<b>üïå –í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ ({namaz.get('last_upd_namaz', '?')}):</b>\n<pre>{namaz_table}</pre>\n\n"
            f"<i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>"
        )
        
        tg_msg(message, parse_mode=ParseMode.HTML)
        return True
    
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}"
        log.error(error_msg)
        send_error_to_telegram(error_msg)
        return False

def main():
    current_hour = datetime.now().hour
    log.info(f"–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ {MODE}")

    try:
        if MODE == "FULL_REPORT":
            log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            weather = get_weather(use_live=True)
            namaz = get_namaz(use_live=True)
            rates = get_rates(use_live=True)
            
            if not all([weather, namaz, rates]):
                log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ: –ø–æ–≥–æ–¥–∞={bool(weather)}, –Ω–∞–º–∞–∑={bool(namaz)}, –∫—É—Ä—Å—ã={bool(rates)}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
                weather = weather or get_weather(use_live=False)
                namaz = namaz or get_namaz(use_live=False)
                rates = rates or get_rates(use_live=False)
                
                if not all([weather, namaz, rates]):
                    log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –∏–∑ —Ñ–∞–π–ª–∞")
                    return
            
            log.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
            data = load_data()
            history = data.get("currency_history", {})
            
            send_text_report(weather, rates, history, namaz)
            
        elif MODE == "UPD_NAMAZ":
            namaz = get_namaz(use_live=True)
            if namaz:
                log.info(f"–í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {namaz.get('last_upd_namaz')}")
            else:
                log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–∞")
                
        elif MODE == "UPD_CURRENCY":
            if not should_run(current_hour, update_only=True):
                log.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å 5 –¥–æ 15)")
                return
                
            rates = get_rates(force_update=True, use_live=True)
            if rates:
                history = process_currency_history(rates)
                log.info(f"–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {rates.get('last_upd_currency')}")
            else:
                log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
                
        log.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
        send_error_to_telegram(error_msg)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--mode", choices=["FULL_REPORT", "UPD_NAMAZ", "UPD_CURRENCY"], 
                       default="FULL_REPORT", help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞")
    parser.add_argument("--use-live", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∂–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (API)")
    parser.add_argument("--currency", type=str, help="–í–∞–ª—é—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (USD/EUR)")
    parser.add_argument("--operation", type=str, choices=["buy", "sale"], help="–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (buy/sale)")
    
    args = parser.parse_args()
    
    MODE = args.mode
    USE_LIVE = args.use_live
    
    if args.currency and args.currency.upper() in CURRENCIES:
        MONITOR_CURRENCY = args.currency.upper()
    
    if args.operation:
        OPERATION_TYPE = args.operation
    
    main()