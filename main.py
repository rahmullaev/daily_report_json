#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from __future__ import annotations
import os, platform, logging, requests, json, argparse, time
from io import BytesIO
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional
from collections import defaultdict
from zoneinfo import ZoneInfo
from PIL import Image, ImageDraw, ImageFont
from telegram import Bot, InputMediaPhoto, ParseMode
from telegram.error import TelegramError
from prettytable import PrettyTable
import re

# Binance client
from binance.client import Client

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
USE_LIVE = True
MODE = "FULL_REPORT"
PARIS = ZoneInfo("Europe/Paris")
DAY_NAME_RU = ["–ü–Ω.", "–í—Ç.", "–°—Ä.", "–ß—Ç.", "–ü—Ç.", "–°–±.", "–í—Å."]

# API endpoints
FORECAST_URL = "https://api.openweathermap.org/data/2.5/forecast"
CURRENT_URL = "https://api.openweathermap.org/data/2.5/weather"

# üîë –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
OW_API_KEY = os.getenv("OW_API_KEY", "")
CITY_ID = os.getenv("CITY_ID", "2994160")  # –¥–µ—Ñ–æ–ª—Ç ‚Äî –ü–∞—Ä–∏–∂

# –ì—Ä–∞—Ñ–∏–∫–∞
WIDTH = 500
ICON_SIZE = 32

# Telegram
USER_IDS = [int(uid) for uid in os.getenv("TELEGRAM_USER_IDS", "883019358").split(",") if uid]
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")

# Kaspi –∫—É—Ä—Å—ã
KASPI_URL = "https://guide.kaspi.kz/client/api/v2/intgr/currency/rate/aggregate"
MONITOR_CURRENCY = "USD"
OPERATION_TYPE = "sale"
CURRENCIES = ("USD", "EUR")
TIMEOUT_API = 10

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_FILE = os.path.join(SCRIPT_DIR, "data", "weather_data.json")
LOG_FILE = os.path.join(SCRIPT_DIR, "Log.log")

BASE_HEADERS = {
    "Accept": "application/json, text/plain, */*",
    "Content-Type": "application/json",
    "gIsAuthorized": "false",
    "gIsInnerRequest": "false",
    "gIsMobileApp": "false",
    "gLanguage": "ru",
    "gRole": "1",
    "gSystem": "kkz",
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
try:
    bot = Bot(token=TELEGRAM_BOT_TOKEN) if TELEGRAM_BOT_TOKEN else None
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    bot = None

# ‚îÄ‚îÄ‚îÄ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='[%(asctime)s]-%(levelname)s-%(message)s',
        datefmt='%d.%m.%Y %H:%M:%S',
        handlers=[
            logging.FileHandler(LOG_FILE, encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

log = setup_logging()


# =============================================================================================

def should_run(hour: int, update_only: bool) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
    if not update_only:
        return True
    return 5 <= hour <= 15

def get_weather(use_live: bool = USE_LIVE) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
    if not use_live:
        data = load_data().get("weather", {})
        if data:
            last_upd = data.get("last_upd_weather", "–ò–∑ —Ñ–∞–π–ª–∞ (–Ω–µ—Ç –¥–∞—Ç—ã)")
            return data | {"last_upd_weather": last_upd}
        return None

    try:
        params = {"id": CITY_ID, "units": "metric", "lang": "ru", "APPID": OW_API_KEY}
        cur = requests.get(CURRENT_URL, params=params, timeout=10).json()
        fc = requests.get(FORECAST_URL, params=params, timeout=10).json()

        today = datetime.now(PARIS).date()
        buckets = defaultdict(list)
        for itm in fc.get("list", []):
            buckets[datetime.utcfromtimestamp(itm["dt"]).date().toordinal()].append(itm)

        forecast = {}
        for off in range(1, 4):
            tgt = today + timedelta(days=off)
            bucket = buckets.get(tgt.toordinal(), [])
            if not bucket: continue
            mid = min(bucket, key=lambda x: abs(datetime.utcfromtimestamp(x["dt"]).hour-12))
            loc = datetime.fromtimestamp(mid["dt"], PARIS)
            suf = str(off)
            forecast |= {
                f"day_name_{suf}": DAY_NAME_RU[loc.weekday()],
                f"temp_{suf}": f"{mid['main']['temp']:+.0f}",
                f"icon_{suf}": mid["weather"][0]["icon"],
                f"descr_{suf}": mid["weather"][0]["description"],
            }

        new_data = {
            "cur_temp": cur["main"]["temp"],
            "cur_icon": cur["weather"][0]["icon"],
            "cur_descr": cur["weather"][0]["description"],
            "last_upd_weather": datetime.now(PARIS).strftime("%d.%m.%Y %H:%M:%S")
        } | forecast

        store = load_data()
        store["weather"] = new_data
        save_data(store)
        return new_data
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return None



def get_namaz(use_live: bool = True) -> Dict[str, str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–æ–≤ —á–µ—Ä–µ–∑ Aladhan API (–ú–µ—Ç—Ü, –§—Ä–∞–Ω—Ü–∏—è)"""
    if not use_live:
        data = load_data().get("namaz", {})
        if data:
            last_upd = data.get("last_upd_namaz", "–ò–∑ —Ñ–∞–π–ª–∞ (–Ω–µ—Ç –¥–∞—Ç—ã)")
            return data | {"last_upd_namaz": last_upd}
        return {}

    try:
        params = {
            "latitude": 49.1193,
            "longitude": 6.1757,
            "method": 3  # ISNA (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–æ –∫ MuslimPro)
        }
        r = requests.get("https://api.aladhan.com/v1/timings", params=params, timeout=10)
        r.raise_for_status()
        data = r.json()
        timings = data.get("data", {}).get("timings", {})

        namaz_mapping = {
            "Fajr": "–§–∞–¥–∂—Ä",
            "Sunrise": "–í–æ—Å—Ö–æ–¥",
            "Dhuhr": "–ó—É—Ö—Ä",
            "Asr": "–ê—Å—Ä",
            "Maghrib": "–ú–∞–≥—Ä–∏–±",
            "Isha": "–ò—à–∞"
        }

        namaz_times = {rus: timings.get(eng, "") for eng, rus in namaz_mapping.items()}
        result = {
            **namaz_times,
            "last_upd_namaz": datetime.now(PARIS).strftime("%d.%m.%Y %H:%M:%S")
        }

        store = load_data()
        store["namaz"] = result
        save_data(store)

        log.info("–í—Ä–µ–º—è –Ω–∞–º–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å Aladhan API.")
        return result

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–º–∞–∑–æ–≤: {e}")
        return {}




def get_rates(force_update: bool = False, use_live: bool = USE_LIVE) -> Dict[str, Dict[str, str]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    if not use_live:
        data = load_data().get("currency_rates", {})
        if data:
            last_upd = data.get("last_upd_currency", "–ò–∑ —Ñ–∞–π–ª–∞ (–Ω–µ—Ç –¥–∞—Ç—ã)")
            return data | {"last_upd_currency": last_upd}
        return {"USD": {"buy": "470.5", "sale": "475.0"}, "EUR": {"buy": "490.0", "sale": "495.0"}}

    try:
        hdrs = {**BASE_HEADERS, "User-Agent": "Mozilla/5.0"}
        payload = {"use_type": "32", "currency_codes": list(CURRENCIES), "rate_types": ["SALE", "BUY"]}
        body = requests.post(KASPI_URL, headers=hdrs, json=payload, timeout=TIMEOUT_API).json()["body"]
        
        res = {it["currency"]: {"buy": it["buy"], "sale": it["sale"]} for it in body if it["currency"] in CURRENCIES}
        res["last_upd_currency"] = datetime.now(PARIS).strftime("%d.%m.%Y %H:%M:%S")
        
        store = load_data()
        store["currency_rates"] = res
        save_data(store)
        
        return res
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
        return {}



def tg_photo(path: str, caption: str = None, additional_ids: list = None):
    try:
        if not bot:
            log.error("–ë–æ—Ç Telegram –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return 0
            
        recipients = USER_IDS.copy()
        if additional_ids:
            recipients.extend(additional_ids)
            
        if not recipients:
            log.error("–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
            return 0
            
        max_attempts = 3
        success_count = 0
        file_processed = False
        
        try:
            with open(path, "rb") as photo_file:
                photo_data = photo_file.read()
                
                for user_id in recipients:
                    for attempt in range(max_attempts):
                        try:
                            bot.send_photo(
                                chat_id=user_id,
                                photo=BytesIO(photo_data),
                                caption=caption,
                                timeout=20
                            )
                            success_count += 1
                            break
                        except TelegramError as e:
                            if attempt == max_attempts - 1:
                                log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                            else:
                                time.sleep(2)
                        except Exception as e:
                            log.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                            break
                
                file_processed = True
                
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ: {e}")
            return success_count
            
        finally:
            if file_processed:
                try:
                    os.remove(path)
                    log.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {path} —É–¥–∞–ª–µ–Ω")
                except Exception as e:
                    log.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        
        log.info(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(recipients)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return success_count
        
    except Exception as e:
        log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ tg_photo: {e}")
        return 0

def save_data(data: dict):
    try:
        os.makedirs(os.path.dirname(DATA_FILE), exist_ok=True)
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def load_data() -> dict:
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        return {}
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return {}

def font_path():
    paths = {
        "Windows": ["C:\\Windows\\Fonts\\consola.ttf", "C:\\Windows\\Fonts\\cour.ttf"],
        "Darwin": ["/System/Library/Fonts/Menlo.ttc"],
        "Linux": ["/usr/share/fonts/truetype/dejavu/DejaVuSansMono.ttf"]
    }
    for p in paths.get(platform.system(), []):
        if os.path.exists(p): return p
    raise FileNotFoundError



def draw_currency_chart(d, x, y, w, h, hist, font, currency):
    if not hist: return y
    vals = [p[OPERATION_TYPE] for p in hist if OPERATION_TYPE in p]
    if not vals: return y
    
    v_min, v_max = min(vals), max(vals)
    if v_min == v_max:
        rng = v_max * 0.02
        v_min = v_max - rng
    else:
        rng = v_max - v_min
    
    bw = max(2, int(w / (len(vals)*3)))
    gap = bw
    total = len(vals)*(bw+gap) - gap
    
    if total > w:
        vals = vals[-w//(bw+gap):]
        total = len(vals)*(bw+gap)-gap
    
    ox = x + (w-total)//2
    oy = y + h
    
    d.line((ox, y, ox, oy), fill=0)
    d.line((ox, oy, ox+total, oy), fill=0)
    
    for i, v in enumerate(vals):
        px = ox + i*(bw+gap)
        ph = int((v - v_min)/rng*h)
        d.rectangle((px, oy-ph, px+bw, oy), fill=0)
    
    current_val = vals[-1] if vals else 0
    operation_name = "buy" if OPERATION_TYPE == "buy" else "sell"
    d.text((ox+total+5, y), f"‚ñ† {currency} ({operation_name}) {current_val}", font=font, fill=0)
    return oy + 20

def draw_pretty_table(draw, x, y, headers, rows, font, max_width=WIDTH - 20):
    table = PrettyTable()
    table.field_names = headers
    for row in rows:
        table.add_row(row)

    table_str = table.get_string()

    for line in table_str.splitlines():
        draw.text((x, y), line, font=font, fill=0)
        bbox = font.getbbox(line)
        line_height = bbox[3] - bbox[1]
        y += line_height + 4

    return y

def make_receipt(weather: dict, curr: dict, hist: dict, namaz: dict, fname="receipt.png") -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è-–æ—Ç—á–µ—Ç–∞ —Å –ø–æ–≥–æ–¥–æ–π, –∫—É—Ä—Å–∞–º–∏, –Ω–∞–º–∞–∑–∞–º–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–º.
    –ò–∫–æ–Ω–∫–∏ –±—É–¥—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é.
    """
    img = Image.new("RGBA", (WIDTH, 1600), (255, 255, 255, 255))
    draw = ImageDraw.Draw(img)
    fp = font_path()
    f24 = ImageFont.truetype(fp, 24)
    f18 = ImageFont.truetype(fp, 18)
    f14 = ImageFont.truetype(fp, 14)

    y = 10
    now = datetime.now(PARIS)
    draw.text((10, y), f"{DAY_NAME_RU[now.weekday()]}, {now.strftime('%d.%m.%Y %H:%M')}", font=f24, fill=0)
    y += 40

    # --- –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ ---
    cur_temp = round(weather.get("cur_temp", 0))
    cur_descr = weather.get("cur_descr", "?")
    ico = get_weather_icon(weather.get("cur_icon"))
    if ico:
        img.paste(ico, (10, y), ico)
    draw.text((50, y + 5), f"{cur_temp}¬∞C, {cur_descr}", font=f24, fill=0)
    y += ICON_SIZE + 20

    # --- –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è ---
    heads = ["#", "–î–µ–Ω—å", "–¢–µ–º–ø", "–ü–æ–≥–æ–¥–∞"]
    rows = []
    icons = []
    for i in range(1, 4):
        rows.append([
            i,
            weather.get(f"day_name_{i}", "?"),
            f"{weather.get(f'temp_{i}', '?')}¬∞C",
            weather.get(f"descr_{i}", "?")[:20]
        ])
        icons.append(get_weather_icon(weather.get(f"icon_{i}", "")))

    draw.text((10, y), f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {weather.get('last_upd_weather', '?')}):", font=f14, fill=0)
    y += 25
    y = draw_table_with_icons(img, draw, 10, y, heads, rows, f18, icons=icons)

    # --- –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç ---
    draw.text((10, y), f"–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {curr.get('last_upd_currency', '?')}):", font=f14, fill=0)
    y += 25
    currency_rows = [[c, curr.get(c, {}).get("buy", "?"), curr.get(c, {}).get("sale", "?")] for c in CURRENCIES]
    y = draw_table_with_icons(img, draw, 10, y, ["–í–∞–ª—é—Ç–∞", "–ü–æ–∫—É–ø–∫–∞", "–ü—Ä–æ–¥–∞–∂–∞"], currency_rows, f18)

    # --- –í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ ---
    draw.text((10, y), f"–í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {namaz.get('last_upd_namaz', '?')}):", font=f14, fill=0)
    y += 25
    namaz_rows = [[n, namaz.get(n, "?")] for n in ["–§–∞–¥–∂—Ä", "–í–æ—Å—Ö–æ–¥", "–ó—É—Ö—Ä", "–ê—Å—Ä", "–ú–∞–≥—Ä–∏–±", "–ò—à–∞"]]
    y = draw_table_with_icons(img, draw, 10, y, ["–ù–∞–º–∞–∑", "–í—Ä–µ–º—è"], namaz_rows, f18)

    # --- –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ ---
    operation_name = "–ø–æ–∫—É–ø–∫–∏" if OPERATION_TYPE == "buy" else "–ø—Ä–æ–¥–∞–∂–∏"
    draw.text((10, y), f"–ì—Ä–∞—Ñ–∏–∫ {MONITOR_CURRENCY} ({operation_name}):", font=f14, fill=0)
    y += 25
    draw_currency_chart(draw, 10, y, WIDTH - 20, 80, hist.get(MONITOR_CURRENCY, []), f14, MONITOR_CURRENCY)
    y += 100

    # --- –§—É—Ç–µ—Ä ---
    footer_text = "¬© Generated by rakhmullaev"
    text_width = f18.getbbox(footer_text)[2]
    draw.text(((WIDTH - text_width)//2, y), footer_text, font=f18, fill=0)

    img.crop((0, 0, WIDTH, y + 30)).save(fname)
    log.info(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {fname}")
    return fname



def draw_table_with_icons(img: Image.Image, draw: ImageDraw.Draw, x: int, y: int,
                          headers: list, rows: list, font: ImageFont.ImageFont,
                          icons: list[Image.Image] | None = None,
                          line_height: int = None, padding: int = 4) -> int:
    """
    –†–∏—Å—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É ASCII —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—Å—Ç–∞–≤–∫–∏ –∏–∫–æ–Ω–æ–∫ –≤ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü.
    img ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç Image
    draw ‚Äî ImageDraw.Draw
    icons ‚Äî —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ PIL.Image –∏–ª–∏ None.
    """
    if line_height is None:
        line_height = max(ICON_SIZE, font.getbbox("A")[3] - font.getbbox("A")[1]) + 4

    columns = list(zip(*([headers] + rows)))
    col_widths = [max(len(str(item)) for item in col) + padding*2 for col in columns]

    def make_line(left, mid, right, fill):
        line = left
        for i, w in enumerate(col_widths):
            line += fill * w
            if i < len(col_widths) -1:
                line += mid
        line += right
        return line

    # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    draw.text((x, y), make_line("+", "+", "+", "-"), font=font, fill=0)
    y += line_height

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    header_line = "|" + "|".join(f" {h.center(col_widths[i]-2)} " for i, h in enumerate(headers)) + "|"
    draw.text((x, y), header_line, font=font, fill=0)
    y += line_height

    # –°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è
    draw.text((x, y), make_line("+", "+", "+", "-"), font=font, fill=0)
    y += line_height

    # –°—Ç—Ä–æ–∫–∏
    for i, row in enumerate(rows):
        row_line = "|" + "|".join(f" {str(cell).ljust(col_widths[j]-2)} " for j, cell in enumerate(row)) + "|"
        draw.text((x, y), row_line, font=font, fill=0)

        # –í—Å—Ç–∞–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –≤ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
        if icons and i < len(icons) and icons[i]:
            icon_img = icons[i]
            cell_x = x + 2
            cell_y = y + (line_height - icon_img.size[1]) // 2
            img.paste(icon_img, (cell_x, cell_y), icon_img)

        y += line_height

    # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    draw.text((x, y), make_line("+", "+", "+", "-"), font=font, fill=0)
    y += line_height
    return y



def tg_msg(txt: str, parse_mode: str = None, additional_ids: list = None):
    try:
        if not bot:
            log.error("–ë–æ—Ç Telegram –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return 0
            
        recipients = USER_IDS.copy()
        if additional_ids:
            recipients.extend(additional_ids)
            
        if not recipients:
            log.error("–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
            return 0
            
        max_attempts = 3
        success_count = 0
        
        for user_id in recipients:
            for attempt in range(max_attempts):
                try:
                    bot.send_message(
                        chat_id=user_id,
                        text=txt,
                        parse_mode=parse_mode,
                        timeout=15
                    )
                    success_count += 1
                    break
                except TelegramError as e:
                    if attempt == max_attempts - 1:
                        log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    else:
                        time.sleep(2)
                except Exception as e:
                    log.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    break
        
        log.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(recipients)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return success_count
        
    except Exception as e:
        log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ tg_msg: {e}")
        return 0


def get_weather_icon(icon_code: str) -> tuple[Image.Image | None, str]:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É OpenWeather –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    (Image —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é RGBA –∏–ª–∏ None, —ç–º–æ–¥–∑–∏ —Å—Ç—Ä–æ–∫–∏)
    –í—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ print.
    """
    
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–∫–æ–Ω–æ–∫ –∏ —ç–º–æ–¥–∑–∏
    OW_ICON_EMOJI = {
        "01d": "‚òÄÔ∏è", "01n": "üåô",
        "02d": "üå§Ô∏è", "02n": "‚òÅÔ∏è",
        "03d": "‚òÅÔ∏è", "03n": "‚òÅÔ∏è",
        "04d": "‚òÅÔ∏è", "04n": "‚òÅÔ∏è",
        "09d": "üåßÔ∏è", "09n": "üåßÔ∏è",
        "10d": "üå¶Ô∏è", "10n": "üå¶Ô∏è",
        "11d": "‚õàÔ∏è", "11n": "‚õàÔ∏è",
        "13d": "‚ùÑÔ∏è", "13n": "‚ùÑÔ∏è",
        "50d": "üå´Ô∏è", "50n": "üå´Ô∏è",
    }

    emoji = OW_ICON_EMOJI.get(icon_code, "")
    
    if not icon_code:
        print("[DEBUG] –ù–µ—Ç –∫–æ–¥–∞ –∏–∫–æ–Ω–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –∏ –ø—É—Å—Ç–æ–µ —ç–º–æ–¥–∑–∏")
        return None, emoji

    url = f"https://openweathermap.org/img/wn/{icon_code}@2x.png"
    print(f"[DEBUG] –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫—É —Å URL: {url}")

    try:
        resp = requests.get(url, timeout=5)
        resp.raise_for_status()
        print(f"[DEBUG] –ò–∫–æ–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(resp.content)} –±–∞–π—Ç")

        img = Image.open(BytesIO(resp.content)).convert("RGBA")
        print(f"[DEBUG] –ò–∫–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ RGBA, —Ä–∞–∑–º–µ—Ä: {img.size}")

        img = img.resize((ICON_SIZE, ICON_SIZE), Image.Resampling.LANCZOS)
        print(f"[DEBUG] –ò–∫–æ–Ω–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –¥–æ —Ä–∞–∑–º–µ—Ä–∞: {img.size}")

        return img, emoji

    except Exception as e:
        print(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É {icon_code}: {e}")
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É {icon_code}: {e}")
        return None, emoji

    

def send_text_report(weather: dict, curr: dict, namaz: dict) -> bool:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å —ç–º–æ–¥–∑–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Telegram —á–µ—Ä–µ–∑ PrettyTable.
    –≠–º–æ–¥–∑–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–æ–¥–∞–º –∏–∫–æ–Ω–æ–∫ OpenWeather.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    try:
        now = datetime.now(PARIS)

        

        # --- –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã ---
        weather_table = PrettyTable()
        weather_table.field_names = ["–í—Ä–µ–º—è", "–¢–µ–º–ø", "–ü–æ–≥–æ–¥–∞"]
        weather_table.align = "l"

        cur_icon_code = weather.get('cur_icon', '')
        cur_icon_img, cur_icon_emoji = get_weather_icon(cur_icon_code)

        log.info(f"[DEBUG] –¢–µ–∫—É—â–∞—è –∏–∫–æ–Ω–∫–∞: {cur_icon_code}, —ç–º–æ–¥–∑–∏: {cur_icon_emoji}")

        cur_descr = weather.get('cur_descr', '')[:15].capitalize()
        cur_temp = f"{round(weather.get('cur_temp', 0))}¬∞C"
        weather_table.add_row([weather.get('last_upd_weather', '?'), cur_temp, cur_descr])

        # --- –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 3 –¥–Ω—è ---
        forecast_table = PrettyTable()
        forecast_table.field_names = ["–î–µ–Ω—å", "–¢–µ–º–ø", "–ü–æ–≥–æ–¥–∞"]
        forecast_table.align = "l"

        for i in range(1, 4):
            day = weather.get(f"day_name_{i}", "?")
            temp = weather.get(f"temp_{i}", "?")
            icon_code = weather.get(f"icon_{i}", "")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –∏ —ç–º–æ–¥–∑–∏ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
            _, icon_emoji = get_weather_icon(icon_code)
            log.info(f"[DEBUG] –ü—Ä–æ–≥–Ω–æ–∑ –¥–µ–Ω—å {i}, –∏–∫–æ–Ω–∫–∞: {icon_code}, —ç–º–æ–¥–∑–∏: {icon_emoji}")
            
            descr = weather.get(f"descr_{i}", "")[:15].capitalize()
            forecast_table.add_row([day, temp, f"{icon_emoji} {descr}"])


        # --- –¢–∞–±–ª–∏—Ü–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç ---
        currency_table = PrettyTable()
        currency_table.field_names = ["–í–∞–ª—é—Ç–∞", "–ö—É—Ä—Å –ü–æ–∫—É–ø–∫–∏", "–ö—É—Ä—Å –ü—Ä–æ–¥–∞–∂–∏"]
        currency_table.align = "l"
        for c in CURRENCIES:
            currency_table.add_row([c, curr.get(c, {}).get("buy", "?"), curr.get(c, {}).get("sale", "?")])

        # --- –¢–∞–±–ª–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞ ---
        namaz_table = PrettyTable()
        namaz_table.field_names = ["–ù–∞–º–∞–∑", "–í—Ä–µ–º—è"]
        namaz_table.align = "l"
        for name in ["–§–∞–¥–∂—Ä", "–í–æ—Å—Ö–æ–¥", "–ó—É—Ö—Ä", "–ê—Å—Ä", "–ú–∞–≥—Ä–∏–±", "–ò—à–∞"]:
            namaz_table.add_row([name, namaz.get(name, "?")])

        # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ---
        message = (
            f"<b>üìÖ –û—Ç—á–µ—Ç –Ω–∞ {now.strftime('%d.%m.%Y %H:%M')}</b>\n\n"
            f"<b>{cur_icon_emoji}–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ ({weather.get('last_upd_weather', '?')}):</b>\n<pre>{weather_table}</pre>\n\n"
            f"<b>üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è:</b>\n<pre>{forecast_table}</pre>\n\n"
            f"<b>üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç ({curr.get('last_upd_currency', '?')}):</b>\n<pre>{currency_table}</pre>\n\n"
            f"<b>üïå –í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ ({namaz.get('last_upd_namaz', '?')}):</b>\n<pre>{namaz_table}</pre>\n\n"
            f"<i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>"
        )

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ---
        tg_msg(message, parse_mode=ParseMode.HTML)
        return True

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return False





def generate_json_report(weather, curr, hist, namaz):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –æ—Ç—á–µ—Ç–∞"""
    report = {
        "weather": weather,
        "currency_rates": curr,
        #"currency_history": hist,
        "namaz_times": namaz,
        "generated_at": datetime.now(PARIS).strftime("%d.%m.%Y %H:%M:%S")
    }
    
    json_file = os.path.join(SCRIPT_DIR, "data", "report.json")
    os.makedirs(os.path.dirname(json_file), exist_ok=True)
    
    with open(json_file, "w", encoding="utf-8") as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    return json_file

def main():
    current_hour = datetime.now().hour
    log.info(f"–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ {MODE}")

    try:
        if MODE == "FULL_REPORT":
            log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            weather = get_weather(use_live=True)
            namaz = get_namaz(use_live=True)
            rates = get_rates(use_live=True)
            
            
            if not all([weather, namaz, rates]):
                log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ: –ø–æ–≥–æ–¥–∞={bool(weather)}, –Ω–∞–º–∞–∑={bool(namaz)}, –∫—É—Ä—Å—ã={bool(rates)}")
                weather = weather or get_weather(use_live=False)
                namaz = namaz or get_namaz(use_live=False)
                rates = rates or get_rates(use_live=False)
                
                if not all([weather, namaz, rates]):
                    log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –∏–∑ —Ñ–∞–π–ª–∞")
                    return
            
            log.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
            data = load_data()
            history = data.get("currency_history", {})
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            #send_text_report(weather, rates, namaz)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JSON –æ—Ç—á–µ—Ç
            json_report = generate_json_report(weather, rates, history, namaz)
            log.info(f"JSON –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {json_report}")
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            #receipt_file = make_receipt(weather, rates, history, namaz)
            #tg_photo(receipt_file, caption="üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç")
            
        elif MODE == "UPD_NAMAZ":
            namaz = get_namaz(use_live=True)
            if namaz:
                log.info(f"–í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {namaz.get('last_upd_namaz')}")
            else:
                log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–∞")
                
        elif MODE == "UPD_CURRENCY":
            if not should_run(current_hour, update_only=True):
                log.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å 5 –¥–æ 15)")
                return
                
            rates = get_rates(force_update=True, use_live=True)
                
        log.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--mode", choices=["FULL_REPORT", "UPD_NAMAZ", "UPD_CURRENCY"], 
                       default="FULL_REPORT", help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞")
    parser.add_argument("--use-live", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∂–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (API)")
    parser.add_argument("--currency", type=str, help="–í–∞–ª—é—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (USD/EUR)")
    parser.add_argument("--operation", type=str, choices=["buy", "sale"], help="–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (buy/sale)")
    
    args = parser.parse_args()
    
    MODE = args.mode
    USE_LIVE = args.use_live
    
    if args.currency and args.currency.upper() in CURRENCIES:
        MONITOR_CURRENCY = args.currency.upper()
    
    if args.operation:
        OPERATION_TYPE = args.operation
    
    main()